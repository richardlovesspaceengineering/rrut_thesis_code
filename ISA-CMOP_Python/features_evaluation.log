Host is: RUTHERFORD
Using interpreter: D:/richa/anaconda3/envs/thesis_env_windows/python.exe
New directory: /tmp/ci-fwSfXF0SFc
File running inside: /tmp/ci-fwSfXF0SFc/runner.py
Running problem: MW1, dimension: 2
Initialising evaluator in debug mode.

------------------------ Evaluating instance: MW1_d2 ------------------------
 
 ~~~~~~~~~~~~ RW Analysis  ~~~~~~~~~~~~ 

Initialising Random Walk Analysis 1 of 2 for MW1_d2

Generating samples (walks + neighbours) for RW features with the following properties:
- Number of walks: 2
- Number of steps per walk: 30
- Step size (% of instance domain): 1.0
- Neighbourhood size: 5

Generated RW sample 1 of 2 in 0.00 seconds.
Generated RW sample 2 of 2 in 0.00 seconds.

Evaluating populations for this sample... (ranks off for walk steps, on for neighbours)
Evaluated RW population 1 of 2 in 0.06 seconds.
Evaluated RW population 2 of 2 in 0.07 seconds.

Initialising feature evaluation for RW features.
Evaluated RW features for sample 1 out of 2 in 0.17 seconds.
Evaluated RW features for sample 2 out of 2 in 0.15 seconds.

Evaluated all RW features

Initialising Random Walk Analysis 2 of 2 for MW1_d2

Generating samples (walks + neighbours) for RW features with the following properties:
- Number of walks: 2
- Number of steps per walk: 30
- Step size (% of instance domain): 1.0
- Neighbourhood size: 5

Generated RW sample 1 of 2 in 0.00 seconds.
Generated RW sample 2 of 2 in 0.00 seconds.

Evaluating populations for this sample... (ranks off for walk steps, on for neighbours)
Evaluated RW population 1 of 2 in 0.05 seconds.
Evaluated RW population 2 of 2 in 0.05 seconds.

Initialising feature evaluation for RW features.
Evaluated RW features for sample 1 out of 2 in 0.15 seconds.
Evaluated RW features for sample 2 out of 2 in 0.12 seconds.

Evaluated all RW features

 
 ~~~~~~~~~~~~ Global Analysis  ~~~~~~~~~~~~ 

Generating distributed samples for Global features with the following properties:
- Num. points: 20
- Num. iterations: 20
- Method: lhs.scipy

Discrepancy: 0.002137
Generated Global sample 1 of 2 in 0.00 seconds.
Discrepancy: 0.001778
Generated Global sample 2 of 2 in 0.00 seconds.

Evaluating populations for global samples...
Evaluated Global population 1 of 2 in 0.01 seconds.
Evaluated Global population 2 of 2 in 0.01 seconds.

Initialising feature evaluation for Global features.
Evaluated Global features for sample 1 out of 2 in 0.02 seconds.
Evaluated Global features for sample 2 out of 2 in 0.02 seconds.

Evaluated all Global features

C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
C:\Users\richa\AppData\Local\Temp\ci-fwSfXF0SFc\features\LandscapeAnalysis.py:279: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  dat[feature_name] = [getattr(self, f"{feature_name}")]
Success!
Successfully appended results to csv file.


Running problem: MW1, dimension: 5
Cleaning up /tmp/ci-fwSfXF0SFc
